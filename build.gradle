buildscript {
    repositories {
        mavenCentral()
        maven { setUrl("https://maven.vaadin.com/vaadin-prereleases") }
        maven { setUrl("https://maven.vaadin.com/vaadin-addons") }
    }
}

plugins {
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "1.0.14.RELEASE"
    id 'java'
    id 'com.vaadin' version "23.2.4"
    id 'war'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.7.4'
}

defaultTasks("clean", "build")

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    maven { setUrl("https://maven.vaadin.com/vaadin-prereleases") }
    maven { setUrl("https://maven.vaadin.com/vaadin-addons") }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly 'org.springframework.boot:spring-boot-devtools' //faster reloas

    implementation "com.vaadin:vaadin-core:$vaadinVersion"
    implementation "com.vaadin:vaadin:$vaadinVersion"

    implementation group: 'com.vaadin', name: 'vaadin-spring-boot-starter', version: "$vaadinVersion"

    //implementation "com.vaadin:vaadin-spring-boot-starter:$vaadinVersion"
    implementation 'org.vaadin.artur.exampledata:exampledata:3.4.0'
    implementation('com.vaadin:vaadin-spring-boot-starter')

    implementation 'com.h2database:h2:2.1.214'

    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-validation:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-devtools:$springBootVersion"

    implementation enforcedPlatform("com.vaadin:vaadin-bom:$vaadinVersion")

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: "$junitVersion"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "$junitVersion"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "$junitVersion"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        //implementation "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
    }

    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    //testImplementation "io.github.bonigarcia:webdrivermanager:3.8.1"

}

dependencyManagement {
    imports {
        mavenBom "com.vaadin:vaadin-bom:$vaadinVersion"
    }
}

test {
    useJUnitPlatform()
    include "*Test"
}

pitest {

}

// The following pnpmEnable = true is not needed as pnpm is used by default,
// this is just an example of how to configure the Gradle Vaadin Plugin:
// for more configuration options please see: https://vaadin.com/docs/latest/guide/start/gradle/#all-options
vaadin {
    pnpmEnable = false //false triggers more performance during development
    productionMode = true
}

war {
    enabled = true
}

tasks.withType(JavaCompile) {
    options.deprecation = true
    options.encoding = 'UTF-8'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

//Javadoc task
javadoc {
  source = sourceSets.main.allJava
  destinationDir = reporting.file("javadoc")
}

//Task that runs integration tests
task integrationTest(type: Test) {
    useJUnitPlatform() // use JUnit framework
    reports {
        reports.html.required = true
        reports.html.destination = file("build/htmlReports/junitReports/integration") // html file destination
    }
    filter{
        includeTestsMatching "*IT"  // filter by names with "IT"
    }
}

// Task that generates integration coverage reports using Jacoco
task jacocoIntegrationReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	sourceSets sourceSets.main
	
    getExecutionData().setFrom("build/jacoco/integrationTest.exec")  //getting the execution data of integration test 
    
    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }   
}

//Task that runs unit tests
task unitTest(type: Test) {
    useJUnitPlatform() // use JUnit framework
    reports {
        reports.html.required = true
        reports.html.destination = file("build/htmlReports/junitReports/unit") // html file destination
    }
    filter{
        includeTestsMatching "*Test"  // filter by names with "Test"
    }
}

// Task that generates unit coverage reports using Jacoco
task jacocoUnitReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	sourceSets sourceSets.main
	
    getExecutionData().setFrom("build/jacoco/unitTest.exec")  //getting the execution data of unit test 
    
    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }
}