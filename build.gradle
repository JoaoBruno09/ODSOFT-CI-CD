import de.fntsoftware.gradle.MarkdownToPdfTask
import de.qualersoft.jmeter.gradleplugin.task.*

buildscript {
    repositories {
        mavenCentral()
        maven { setUrl("https://maven.vaadin.com/vaadin-prereleases") }
        maven { setUrl("https://maven.vaadin.com/vaadin-addons") }
    }
}

plugins {
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "1.0.14.RELEASE"
    id 'java'
    id 'com.vaadin' version "23.2.4"
    id 'war'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.9.0'
    id "de.fntsoftware.gradle.markdown-to-pdf" version "1.1.0"
    id 'org.liquibase.gradle' version '2.0.4'
    id 'checkstyle'
    id  "com.github.spotbugs"  version  "5.0.13"
    id 'de.qualersoft.jmeter' version '2.1.0'
    id "se.thinkcode.cucumber-runner" version "0.0.8"
}

defaultTasks("clean", "build")

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    maven { setUrl("https://maven.vaadin.com/vaadin-prereleases") }
    maven { setUrl("https://maven.vaadin.com/vaadin-addons") }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

dependencies {
    developmentOnly 'org.springframework.boot:spring-boot-devtools' //faster reloas

    implementation "com.vaadin:vaadin-core:$vaadinVersion"
    implementation "com.vaadin:vaadin:$vaadinVersion"

    implementation group: 'com.vaadin', name: 'vaadin-spring-boot-starter', version: "$vaadinVersion"

    //implementation "com.vaadin:vaadin-spring-boot-starter:$vaadinVersion"
    implementation 'org.vaadin.artur.exampledata:exampledata:3.4.0'
    implementation('com.vaadin:vaadin-spring-boot-starter')

    //selenium
    implementation 'org.seleniumhq.selenium:selenium-java:4.7.0'
    testImplementation("io.github.bonigarcia:webdrivermanager:5.3.1")

    //cucumber
    implementation group: 'io.cucumber', name: 'cucumber-java', version: '7.9.0'
    implementation group: 'io.cucumber', name: 'cucumber-junit', version: '7.9.0'

    //liquibase
    liquibaseRuntime 'org.liquibase:liquibase-core:4.2.2'
    liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:2.1.1'
    liquibaseRuntime 'info.picocli:picocli:4.6.1'
    liquibaseRuntime 'org.postgresql:postgresql:42.5.1'
    liquibaseRuntime sourceSets.main.output

    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-validation:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-devtools:$springBootVersion"

    implementation enforcedPlatform("com.vaadin:vaadin-bom:$vaadinVersion")

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: "$junitVersion"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "$junitVersion"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "$junitVersion"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        //implementation "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
    }

    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    //testImplementation "io.github.bonigarcia:webdrivermanager:3.8.1"

    //database
    implementation 'org.postgresql:postgresql:42.5.1'

    //load class "org.slf4j.impl.StaticLoggerBinder" for sportBugsc can work
    spotbugsSlf4j  "org.slf4j:slf4j-simple:1.7.30"

}

dependencyManagement {
    imports {
        mavenBom "com.vaadin:vaadin-bom:$vaadinVersion"
    }
}

test {
    useJUnitPlatform()
    include "*Test"
}

pitest {

    junit5PluginVersion = '1.0.0'
    pitestVersion = '1.9.0'
    timestampedReports = false
    pitest.excludedTestClasses = ['com.example.application.views.list.*IT'] //Excludint integrationTests

}

// The following pnpmEnable = true is not needed as pnpm is used by default,
// this is just an example of how to configure the Gradle Vaadin Plugin:
// for more configuration options please see: https://vaadin.com/docs/latest/guide/start/gradle/#all-options
vaadin {
    pnpmEnable = false //false triggers more performance during development
    //productionMode = true
}

war {
    enabled = true
}

tasks.withType(JavaCompile) {
    options.deprecation = true
    options.encoding = 'UTF-8'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

//Javadoc task
javadoc {
  source = sourceSets.main.allJava
  destinationDir = reporting.file("javadoc")
}

//Task that runs integration tests
task integrationTest(type: Test) {
    useJUnitPlatform() // use JUnit framework
    reports {
        reports.html.required = true
        reports.html.destination = file("build/htmlReports/junitReports/integration") // html file destination
    }
    filter{
        includeTestsMatching "*IT"  // filter by names with "IT"
    }
}

// Task that generates integration coverage reports using Jacoco
task jacocoIntegrationReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	sourceSets sourceSets.main
	
    getExecutionData().setFrom("build/jacoco/integrationTest.exec")  //getting the execution data of integration test 
    
    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }   
}

// Task that verifies integration coverage reports, in this case the minimum of coverage should be 0.2
jacocoTestCoverageVerification {
	getExecutionData().setFrom("build/jacoco/integrationTest.exec")
	violationRules {
		rule {
			limit {
				minimum  =  0.2
			}
		}
	}
}

//Task that runs unit tests
task unitTest(type: Test) {
    useJUnitPlatform() // use JUnit framework
    reports {
        reports.html.required = true
        reports.html.destination = file("build/htmlReports/junitReports/unit") // html file destination
    }
    filter{
        includeTestsMatching "*Test"  // filter by names with "Test"
    }
}

// Task that generates unit coverage reports using Jacoco
task jacocoUnitReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	sourceSets sourceSets.main
	
    getExecutionData().setFrom("build/jacoco/unitTest.exec")  //getting the execution data of unit test 
    
    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }
}

// Task that generates mutation coverage reports using Jacoco
task jacocoMutationReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	sourceSets sourceSets.main
	
    getExecutionData().setFrom("build/jacoco/mutationTest.exec")  //getting the execution data of mutation test 
    
    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }
}

//renaming the generated war file so that when we deploy to tomcat it gets deployed to the root path
task renameDeployFile(type: Copy) {
    from('build/libs/') //indicating where the war file is
    include('flowcrmtutorial-0.0.1-SNAPSHOT.war') //specifying the file name
    destinationDir file('build/libs/') //indicationg the destination of the renamed file
    rename 'flowcrmtutorial-0.0.1-SNAPSHOT.war', 'ROOT.war'; //renaming file
}

//End2End task matching the file name by convention and generating a report
task endToEnd(type: Test) {
    useJUnitPlatform()
    reports.html.setDestination(file("build/htmlReports/selenium/end2end")) //setting output directory for the test result
    filter{
        includeTestsMatching "*E2E"  // filter by name convention
    }
}

// Generate pdf file out of a markdown file
task pdfConverter(type: MarkdownToPdfTask){
    inputFile = 'README.md' //The markdown file you want to convert
    outputFile = 'README.pdf' //the name of the pdf file you want to get
}

//Task that runs spotbugs
spotbugs {
	ignoreFailures  =  true
	toolVersion  =  '4.7.3'
	reportsDir  =  file("$buildDir/reports/spotbugs")
}

spotbugsMain {
	reports {
		xml.enabled  =  true
	}
}

spotbugsTest {
	reports {
		xml.enabled  =  true
	}
}

task jmRun(type: JMeterRunTask) {
    jmxFile.set("test.jmx")
}

task cucumberTest() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {

            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output

            args = ['--plugin', 'pretty',
                    '--plugin', 'html:build/reports/tests/cucumber/cucumber-report.html',
                    '--plugin', 'json:build/reports/tests/cucumber/cucumber-report.json',
                    '--plugin', 'junit:build/reports/tests/cucumber/cucumber-report.xml',
                    '--glue', 'cucumber.steps',
                    '--publish',
                    'src/test/resources/features'
            ]
        }
    }
}

//liquibase config
liquibase {
    activities {
        main {
            changeLogFile "src/main/resources/changelog/changelog.xml"
            url "jdbc:postgresql://localhost:5433/odsoft"
            username "postgres"
            password "12345"
        }
    }
}

task genLiquidFile{
    generateChangelog
}

//Generate zip file
task genZip(type: Zip) {
    archiveName = "G202_ODSOFT.zip" //name of the zip
    destinationDir = file("build") //where is going to be generated the zip file

    from('build/test-results/jmeter/'){
        include 'test.jtl'
    }
    from('build/libs/') {
        include 'ROOT.war'
    }
    from('build/reports/'){
        include '*'
    }
    from('build/htmlReports/'){
        include '*'
    }
    from('build/reports/'){
        include '*'
    }
    from('.'){
        include 'src'
        include 'frontend'
        include 'chromedriver'
        include 'chromedriver.exe'
        include 'Dockerfile'
        include 'docker-compose-staging.yml'
        include 'docker-compose.yml'
        include 'Jenkinsfile'
        include 'gradle'
        include 'build.gradle'
        include 'config'
        include 'gradlew'
        include 'gradlew.bat'
        include 'settings.gradle'
        include 'gradle.properties'
        include 'README.pdf'
    }
}